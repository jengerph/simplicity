<?php
///////////////////////////////////////////////////////////////////////////////
//
// user.class - Class for accessing essential user data
// $Id$
//
///////////////////////////////////////////////////////////////////////////////
//
// HISTORY:
// $Log$
///////////////////////////////////////////////////////////////////////////////
include_once "db.class";
include_once "config.class";
include_once "validate.class";
include_once "misc.class";
include_once "audit.class";

class user {

  var $client_id;
  var $username;
  var $password;
  var $last_name;
  var $first_name;
  var $email;
  var $class;
  var $active;
  var $md5password;
  var $home_phone;
  var $work_phone;
  var $mobile;
  var $email2;
  var $state;
  var $lanugage;
  var $photo;
  var $access_id;
  var $language;
  
  
  var $db;
  var $server_name;
  var $database_name;
  var $user_name;
  var $user_password;


  /* function user() 
  **
  ** DESCRIPTION: Class constructor, initalizes and sets up DB connectoin
  **
  ** PARAMETERS:
  **
  ** RETURNS:
  ** 
  */
  function user() { 
    
	
    $config = new config();
    
    $this->server_name = $config->mysql_server_name;
    $this->database_name = $config->mysql_database_name;
    $this->user_name = $config->mysql_user_name;
    $this->user_password = $config->mysql_user_password;
    
    $this->db = new db($this->server_name, $this->database_name, $this->user_name, $this->user_password);
    
    $this->class = 'customer';
    $this->active = 'yes';
    $this->language = 'eng';
    
    


  }

  /* function load()
  **
  ** DESCRIPTION: loads data from table
  **
  ** PARAMETERS:
  ** - none
  **
  ** RETURNS:
  ** 1 - sucess
  ** 0 - fail
  ** 
  */
  function load() {

    $this->username = strtolower($this->username);
  
    if ($this->username) {
      
      $query = "SELECT * FROM users WHERE username = " . $this->db->quote($this->username);
      $result = $this->db->execute_query($query);
      
      if ($result != 0 ) {

        $row = $this->db->fetch_row_array($result);
        
        if(is_array($row)){
          while ($cel = each($row)) {

  	        $key = $cel['key'];
            
            $this->{$key} = $cel['value'];
            
          }
        }
        
        $this->md5password = $row['password'];     
        
        // Photo
        $config = new config();
        $file = $config->photos_dir . '/users/' . $this->username;
        if (!file_exists($file)) {
          
          // Does not exist
          $file = $config->photos_dir . '/default';
        }
        
        $handle = @fopen($file, "r");
        if ($handle) {
          while (($buffer = fgets($handle, 4096)) !== false) {
              $this->photo .= $buffer;
          }
          if (!feof($handle)) {
              echo "Error: unexpected fgets() fail\n";
          }
          fclose($handle);
        }
      }    
    }

    return 0;
    
  }

  /* function exist()
  **
  ** DESCRIPTION: checks to see if an id exists
  **
  ** PARAMETERS:
  ** - none
  **
  ** RETURNS:
  ** 1 - user exists
  ** 0 - user does not exist
  ** 
  */
  function exist() {
  
    $this->username = strtolower($this->username);
  
    // Check we have an user
    if (!$this->username) {
    
      return 0;
      
    }
    
    $query = "SELECT username FROM users WHERE username = " . $this->db->quote($this->username);
    $result = $this->db->execute_query($query);
      
    if ($result != 0 ) {
    
      $row_count = $this->db->fetch_row_count($result);
      
      if ($row_count == 1) {
      
        return 1;
        
      } else {
      
        return 0;
        
      }
      
    }
    
    return 0;
  
    
  }

  /* function create()
  **
  ** DESCRIPTION: creates a new entry
  **
  ** PARAMETERS:
  ** - none
  **
  ** RETURNS:
  ** 1 - sucess
  ** 0 - fail
  ** 
  */
  function create_real() {
	
    // Validate
    if (user::validate()) {
    
      return 0;
      
    }

    $this->password = md5($this->password);
    

    // Create the account
    $query = "INSERT INTO users ( username, password, last_name, first_name, email, class, active, home_phone, work_phone, mobile, email2, state, access_id, language)";
    $query .= " VALUES (" . $this->db->quote($this->username) . "," . $this->db->quote($this->password) . "," . $this->db->quote($this->last_name) . "," . $this->db->quote($this->first_name) . "," . $this->db->quote($this->email) . ","  . $this->db->quote($this->class) . "," . $this->db->quote($this->active) . "," . $this->db->quote($this->home_phone) . "," . $this->db->quote($this->work_phone) . "," . $this->db->quote($this->mobile) . "," . $this->db->quote($this->email2) . "," . $this->db->quote($this->state) . "," . $this->db->quote($this->access_id) . "," . $this->db->quote($this->language) . ")";

    $result = $this->db->execute_query($query);
    

    if ($result == 0) {
      return 0;
      
    } else {

        //Audit section for storing first changes
        $temp = get_object_vars($this);

        unset($temp['db']);
        unset($temp["server_name"]);
        unset($temp["database_name"]);
        unset($temp["user_name"]);
        unset($temp["user_password"]);
        $keys = array_keys($temp);

        $changes = new audit();
        $changes->store_first_changes($keys,$this,"user",$this->username);
    
      return 1;
					
    }
  }
  
  function create() {
  
    if ($this->create_real() == 1) {

      $this->load();
    
      return 1;
      
    } else {
    
      return 0;
      
    }    
      
  }

  /* function delete()
  **
  ** DESCRIPTION: Deletes an entry
  **
  ** PARAMETERS:
  ** - none
  **
  ** RETURNS:
  ** 1 - sucess
  ** 0 - fail
  ** 
  */
  function delete() {
  
		$this->load();
    
    if (!$this->exist()) {
    
      return 0;
      
    }
    
    // Prepare the query
    $query = "DELETE FROM users WHERE username = " . $this->db->quote($this->username);
    $result = $this->db->execute_query($query);
    
    if ($result == 0) {
    
      return 0;
      
    } else {

	  return 1;
    }
  }


  /* function validate()
  **
  ** DESCRIPTION: validates data currently stored in variables
  **
  ** PARAMETERS:
  ** - none
  **
  ** RETURNS:
  ** 0 - sucess
  ** 1 - login id is bad
  ** 2 - status code is bad
  ** 3 - password is bad
  ** 
  */
  function validate() {
    
    $validate = new validate();
    
    $this->username = strtolower($this->username);
    if (strlen($this->username) < 4) {
    	
    	return 1;
    	
    }
    
    if ($this->last_name == '') {
    	
    	return 2;
    	
    } 
    
    if ($this->first_name == '') {
    	
    	return 3;
    	
    }

    $this->active = strtolower($this->active);
    if ($this->active != 'yes' && $this->active != 'no') {
    	
    	return 4;
    	
    }
    
    if (!$validate->email($this->email)) {
    	
    	return 5;
    	
    }
    
    $this->class = strtolower($this->class);
    
    if ($this->class != 'admin' && $this->class != 'customer' && $this->class != 'reseller') {
    	
    	return 6;
    	
    }
    
    if ($this->md5password != '' && $this->md5password != $this->password) {
    
    	if (!$validate->password($this->password)) {
    	
    		return 7;
    	
    	}
		}

		if ($this->email2 != '') {
   		if (!$validate->email($this->email2)) {
    	
    		return 8;
    	
    	}					
		}
		
		$this->state = strtoupper($this->state);
		if ($this->state != 'VIC' && $this->state != 'ACT' && $this->state != 'NSW' && $this->state != 'QLD' && $this->state != 'SA' && $this->state != 'NT' && $this->state != 'WA' && $this->state != 'TAS') {

			return 9;
		}


    $this->language = strtolower($this->language);
    if ($this->language != 'eng' && $this->language != 'chi') {
    	
    	return 72;
    	
    }
		
    // ALL OK
    return 0;
    
  }
  

  /* function save_real()
  **
  ** DESCRIPTION: saves current data into an already existant entry
  **
  ** PARAMETERS:
  ** - none
  **
  ** RETURNS:
  ** 1 - sucess
  ** 0 - fail
  ** 
  */
  function save_real() {
  
    // Validate
    if (user::validate()) {
		
      return 0;
      
    }

    // Check if id exists    
    if (!user::exist()) {
      return 0;
      
    }

		if ($this->password != $this->md5password) {
		    
    	$this->password = md5($this->password);
    }

    $user = new user();
    $user->username = $this->username;
    $user->load();
    
    $query = "UPDATE users SET password = " . $this->db->quote($this->password) . ", last_name = " . $this->db->quote($this->last_name) . ", first_name = " . $this->db->quote($this->first_name) . ", email = " . $this->db->quote($this->email) . ", class = " . $this->db->quote($this->class) . ", active = " . $this->db->quote($this->active) . ", home_phone = " . $this->db->quote($this->home_phone) . ", work_phone = " . $this->db->quote($this->work_phone) . ", mobile = " . $this->db->quote($this->mobile) . ", email2 = " . $this->db->quote($this->email2) . ", state = " . $this->db->quote($this->state) . ", access_id = " . $this->db->quote($this->access_id) . ", language = " . $this->db->quote($this->language);
    $query .= " WHERE username = " . $this->db->quote($this->username);

    $result = $this->db->execute_query($query);

    if ($result == 0) {

      return 0;
      
    } else {

        //Audit section for storing first changes
        $temp = get_object_vars($this);

        unset($temp['db']);
        unset($temp["server_name"]);
        unset($temp["database_name"]);
        unset($temp["user_name"]);
        unset($temp["user_password"]);
        $keys = array_keys($temp);
        
        $changes = new audit();
        $changes->store_changes($keys,$user,$this,"user",$this->username);

     	return 1;
				
    }
  }

  function save() {
  
    if ($this->save_real() == 1) {

      $this->load();
    
      return 1;
      
    } else {
		
      return 0;
      
    }    
      
  }

	function upload_photo() {
	  // Check if id exists    
    if (!user::exist()) {
      return 0;
      
    }
    $config = new config();
    $file = $config->photos_dir . '/users/' . $this->username;
		file_put_contents (  $file, $this->photo );
		
    $audit = new audit();
    $audit->username = $_SESSION['username'];
    $audit->object = 'user';
    $audit->id = $this->username;
    $audit->ip = $_SESSION['ip'];
    $audit->hostname = $_SERVER["SERVER_NAME"];
    $audit->field = "photo";
    $audit->activity = "changed photo";
    $audit->create();

		return 1;
				
	}
  /* function search($field_name, $value)
  **
  ** DESCRIPTION: Searches the database field $field_name for the value $value
  **
  ** PARAMETERS:
  ** - none
  **
  ** RETURNS:
  ** - array of arrays containing:
  **   - account number
  **   - business
  **   - last name
  **   - city
  **   - state
  ** 
  */
  function search($field_name, $value, $order_by, $first) {
  
    $value = '%' . $value . '%';

    $query = "SELECT username, last_name, first_name FROM users WHERE " .  $field_name . " LIKE " . $this->db->quote($value);
    $query .= " ORDER BY $order_by $first";
    
    $results = array();
    $count = 0;

    $result = $this->db->execute_query($query);
    
    while ( $row = $this->db->fetch_row_array($result)) {
      
      $results[$count] = $row;
      
      $count++;

    }

    return $results;
    
  }



  /* function getAll()
  **
  ** DESCRIPTION: Returns all users
  **
  ** PARAMETERS:
  ** - none
  **
  ** RETURNS:
  ** - array of arrays containing:
  **   - account number
  **   - business
  **   - last name
  **   - city
  **   - state
  ** 
  */
  function getAll($activeonly = 'no', $state = '', $class='', $access_id = 1) {
  
    $query = "SELECT username FROM users";

    if ( ($class != 'admin') || ($class == 'admin' && $access_id > 1) ) {
      $query .= " WHERE access_id = " . $this->db->quote($access_id);
    }
    
    $results = array();
    $count = 0;

    $result = $this->db->execute_query($query);
    
    while ( $row = $this->db->fetch_row_array($result)) {
      
      $results[$count] = $row['username'];
      
      $count++;

    }

    return $results;
    
  }

  /* function get_users()
  **
  ** DESCRIPTION: retrieves all customer details from the table
  **
  ** PARAMETERS:
  ** - none
  **
  ** RETURNS:
  ** - an array containing all the list of customer details
  ** 
  */
  function get_users() {
    $query = "SELECT access_id FROM users WHERE class = 'customer'";
      $result = $this->db->execute_query($query);
      
      if ($result != 0 ) {

        $a = array();

        while($row = $this->db->fetch_row_array($result)) {
          $a[] = $row;
        }
      }

    return $a;
  }

}

