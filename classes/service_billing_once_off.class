<?php
///////////////////////////////////////////////////////////////////////////////
//
// service_billing_once_off.class - Class for accessing service_billing_once_off details
// $Id$
//
///////////////////////////////////////////////////////////////////////////////
//
// HISTORY:
// $Log$
///////////////////////////////////////////////////////////////////////////////
include_once "db.class";
include_once "config.class";
include_once "validate.class";
include_once "misc.class";
include_once "user.class";
include_once "service_types.class";

class service_billing_once_off {
  var $item_id;
  var $service_id;
  var $description;
  var $main_unit_amount;
  var $wholesale_unit_amount;
  var $gst;
  var $qty;
  var $item_type;
  var $ts;
  var $main_invoice_id;
  var $main_item_id;
  var $wholesale_invoice_id;
  var $wholesale_item_id;
  
  var $db;
  var $server_name;
  var $database_name;
  var $user_name;
  var $user_password;


  /* function service_billing_once_off() 
  **
  ** DESCRIPTION: Class constructor, initalizes and sets up DB connectoin
  **
  ** PARAMETERS:
  **
  ** RETURNS:
  ** 
  */
  function service_billing_once_off() { 
    
  
    $config = new config();
    
    $this->server_name = $config->mysql_server_name;
    $this->database_name = $config->mysql_database_name;
    $this->user_name = $config->mysql_user_name;
    $this->user_password = $config->mysql_user_password;

    $this->db = new db($this->server_name, $this->database_name, $this->user_name, $this->user_password);
    
  }

  /* function load()
  **
  ** DESCRIPTION: loads data from table
  **
  ** PARAMETERS:
  ** - none
  **
  ** RETURNS:
  ** 1 - sucess
  ** 0 - fail
  ** 
  */
  function load() {

    $this->item_id = strtoupper($this->item_id);

    if (!$this->item_id) {
    
      return 0;
      
    }
  
    if ($this->item_id) {
      
      $query = "SELECT * FROM service_billing_once_off WHERE item_id = " . $this->db->quote($this->item_id);
      $result = $this->db->execute_query($query);

      if ($result != 0 ) {

        $row = $this->db->fetch_row_array($result);
        while ($cel = each($row)) {

          $key = $cel['key'];
          
          $this->{$key} = $cel['value'];
          
        }
      }    
    }


    return 0;
    
  }

  /* function exist()
  **
  ** DESCRIPTION: checks to see if an id exists
  **
  ** PARAMETERS:
  ** - none
  **
  ** RETURNS:
  ** 1 - user exists
  ** 0 - user does not exist
  ** 
  */
  function exist() {
  
    $this->item_id = $this->item_id;

    $user = new user();
    $user->item_id = $this->item_id;
    $user->load();

    if ( !$user->item_id ) {

      return 1;

    }
    
    
    $query = "SELECT item_id FROM service_billing_once_off WHERE item_id = " . $this->db->quote($this->item_id);
    $result = $this->db->execute_query($query);
      
    if ($result != 0 ) {
    
      $row_count = $this->db->fetch_row_count($result);
      
      if ($row_count == 1) {
      
        return 1;
        
      } else {
      
        return 0;
        
      }
      
    }
    
    return 0;
  
    
  }



  /* function create()
  **
  ** DESCRIPTION: creates a new entry
  **
  ** PARAMETERS:
  ** - none
  **
  ** RETURNS:
  ** 1 - sucess
  ** 0 - fail
  ** 
  */
  function create_real() {
    
    // Create the property search
    $query = "INSERT INTO service_billing_once_off (service_id, description, main_unit_amount, wholesale_unit_amount, gst, qty, item_type, main_invoice_id, main_item_id, wholesale_invoice_id, wholesale_item_id)";
    $query .= " VALUES (" . $this->db->quote($this->service_id) .", ". $this->db->quote($this->description) .", ". $this->db->quote($this->main_unit_amount) .", ". $this->db->quote($this->wholesale_unit_amount) .", ". $this->db->quote($this->gst) .", ". $this->db->quote($this->qty) .", ". $this->db->quote($this->item_type) .", ". $this->db->quote($this->main_invoice_id) .", ". $this->db->quote($this->main_item_id) .", ". $this->db->quote($this->wholesale_invoice_id) .", ". $this->db->quote($this->wholesale_item_id) . ")";

    $result = $this->db->execute_query($query);
    
    if ($result == 0) {
      return 0;
      
    } else {
      
      return 1;
          
    }
  }
  
  function create() {
    if ($this->create_real() == 1) {

      $this->load();
      //Audit section for storing first changes
        $temp = get_object_vars($this);

        unset($temp['db']);
        unset($temp["server_name"]);
        unset($temp["database_name"]);
        unset($temp["user_name"]);
        unset($temp["user_password"]);
        $keys = array_keys($temp);

        $changes = new audit();
        $changes->store_first_changes($keys,$this,"service_billing_once_off",$this->item_id);
    
      return 1;
      
    } else {
    
      return 0;
      
    }    
      
  }

  /* function validate()
  **
  ** DESCRIPTION: validates data currently stored in variables
  **
  ** PARAMETERS:
  ** - none
  **
  ** RETURNS:
  ** 0 - sucess
  ** 
  */
  function validate() {
    
    if ( !$this->description ) {
      return 131;
    }

    if ( !is_numeric($this->main_unit_amount) ) {
      return 260;
    }

    if ( !is_numeric($this->wholesale_unit_amount) ) {
      return 261;
    }

    if ( !$this->qty ) {
      return 262;
    } else if ( !is_numeric($this->qty) ) {
      return 262;
    }

    if ( !$this->item_type ) {
      return 263;
    }

    // ALL OK
    return 0;
    
  }

/* function save_real()
  **
  ** DESCRIPTION: saves current data into an already existant entry
  **
  ** PARAMETERS:
  ** - none
  **
  ** RETURNS:
  ** 1 - sucess
  ** 0 - fail
  ** 
  */
  function save_real() {
    // Validate
    if (service_billing_once_off::validate()) {
    
      return 0;
      
    }

    // Check if id exists    
    if (!service_billing_once_off::exist()) {
      return 0;
      
    }

    $previous = new service_billing_once_off();
    $previous->item_id = $this->item_id;
    $previous->fnn = $this->fnn;
    $previous->load();

    $query = "UPDATE service_billing_once_off SET service_id = " . $this->db->quote($this->service_id);
    $query .= ", description = " . $this->db->quote($this->description);
    $query .= ", main_unit_amount = " . $this->db->quote($this->main_unit_amount);
    $query .= ", wholesale_unit_amount = " . $this->db->quote($this->wholesale_unit_amount);
    $query .= ", gst = " . $this->db->quote($this->gst);
    $query .= ", qty = " . $this->db->quote($this->qty);
    $query .= ", item_type = " . $this->db->quote($this->item_type);
    $query .= ", main_invoice_id = " . $this->db->quote($this->main_invoice_id);
    $query .= ", main_item_id = " . $this->db->quote($this->main_item_id);
    $query .= ", wholesale_invoice_id = " . $this->db->quote($this->wholesale_invoice_id);
    $query .= ", wholesale_item_id = " . $this->db->quote($this->wholesale_item_id);
    $query .= " WHERE item_id = " . $this->db->quote($this->item_id);
    
    $result = $this->db->execute_query($query);

    if ($result == 0) {

      return 0;
      
    } else {

        //Audit section for storing first changes
        $temp = get_object_vars($this);

        unset($temp['db']);
        unset($temp["server_name"]);
        unset($temp["database_name"]);
        unset($temp["user_name"]);
        unset($temp["user_password"]);
        $keys = array_keys($temp);
        
        $changes = new audit();
        $changes->store_changes($keys,$user,$this,"service_billing_once_off",$this->item_id);

      return 1;
        
    }
  }

  function save() {
  
    if ($this->save_real() == 1) {

      $this->load();
    
      return 1;
      
    } else {
    
      return 0;
      
    }    
      
  }

  /* function delete()
  **
  ** DESCRIPTION: Deletes an entry
  **
  ** PARAMETERS:
  ** - none
  **
  ** RETURNS:
  ** 1 - sucess
  ** 0 - fail
  ** 
  */
  function delete() {
    
    if (!$this->exist()) {
    
      return 0;
      
    }
    
    // Prepare the query
    $query = "DELETE FROM service_billing_once_off WHERE item_id = " . $this->db->quote($this->item_id);
    $result = $this->db->execute_query($query);
    
    if ($result == 0) {
    
      return 0;
      
    } else {

    return 1;
    }
  }

  /* function get_all()
  **
  ** DESCRIPTION: Deletes an entry
  **
  ** PARAMETERS:
  ** - none
  **
  ** RETURNS:
  ** 1 - sucess
  ** 0 - fail
  ** 
  */
  function get_all() {
    
    $a = array();
      if ( !$this->service_id ) {
        return 0;
      }

      $query = "SELECT * FROM service_billing_once_off WHERE service_id=" . $this->service_id;
      $result = $this->db->execute_query($query);
      
      if ($result != 0 ) {

        while($row = $this->db->fetch_row_array($result)) {
          $a[] = $row;
        }
      }

    return $a;
  }

  /* function get_all_no_id()
  **
  ** DESCRIPTION: Deletes an entry
  **
  ** PARAMETERS:
  ** - none
  **
  ** RETURNS:
  ** 1 - sucess
  ** 0 - fail
  ** 
  */
  function get_all_no_id($user,$id,$start,$end) {
    
    $a = array();

      if ( $user == "reseller" ) {
        $query = "SELECT * FROM service_billing_once_off sbo JOIN services s ON sbo.service_id=s.service_id JOIN customers c ON s.customer_id=c.customer_id WHERE c.wholesaler_id=" . $id . " LIMIT " . $start . ", " . $end;
      } else if ( $user == "admin" ) {
        $query = "SELECT * FROM service_billing_once_off LIMIT " . $start . ", " . $end;
      }
      $result = $this->db->execute_query($query);
      
      if ($result != 0 ) {

        while($row = $this->db->fetch_row_array($result)) {
          $a[] = $row;
        }
      }

    return $a;
  }

  /* function service_exist()
  **
  ** DESCRIPTION: Deletes an entry
  **
  ** PARAMETERS:
  ** - none
  **
  ** RETURNS:
  ** 1 - sucess
  ** 0 - fail
  ** 
  */
  function service_exist() {

      $query = "SELECT * FROM service_billing_once_off WHERE service_id = " . $this->db->quote($this->service_id);
      $result = $this->db->execute_query($query);
      
      if ($result != 0 ) {

        $row = $this->db->fetch_row_array($result);
        if ( $row ) {
          while ($cel = each($row)) {

            $key = $cel['key'];
            
            $this->{$key} = $cel['value'];
            
          }
        }
      }
      return 0;

  }

  /* function get_num_rows()
  **
  ** DESCRIPTION: Deletes an entry
  **
  ** PARAMETERS:
  ** - none
  **
  ** RETURNS:
  ** int
  ** 
  ** 
  */
  function get_num_rows($user,$id) {
    
    $a = array();

      if ( $user == "reseller" ) {
        $query = "SELECT * FROM service_billing_once_off sbo JOIN services s ON sbo.service_id=s.service_id JOIN customers c ON s.customer_id=c.customer_id WHERE c.wholesaler_id=" . $id;
      } else if ( $user == "admin" ) {
        $query = "SELECT * FROM service_billing_once_off";
      }
      $result = $this->db->execute_query($query);

    return mysql_num_rows($result);
  }

  /* function get_num_rows_wua()
  **
  ** DESCRIPTION: Deletes an entry
  **
  ** PARAMETERS:
  ** - none
  **
  ** RETURNS:
  ** int
  ** 
  ** 
  */
  function get_num_rows_no_wua($user,$id) {
      
      if ( $user == "reseller" ) {
        $query = "SELECT * FROM service_billing_once_off sbo JOIN services s ON sbo.service_id=s.service_id JOIN customers c ON s.customer_id=c.customer_id WHERE c.wholesaler_id=" . $id . " AND sbo.wholesale_unit_amount = 0";
      } else if ( $user == "admin" ) {
        $query = "SELECT * FROM service_billing_once_off WHERE wholesale_unit_amount = 0";
      }
      $result = $this->db->execute_query($query);

    return mysql_num_rows($result);
  }

  /* function get_num_rows_wua()
  **
  ** DESCRIPTION: Deletes an entry
  **
  ** PARAMETERS:
  ** - none
  **
  ** RETURNS:
  ** int
  ** 
  ** 
  */
  function get_num_rows_wua($user,$id) {
      
      if ( $user == "reseller" ) {
        $query = "SELECT * FROM service_billing_once_off sbo JOIN services s ON sbo.service_id=s.service_id JOIN customers c ON s.customer_id=c.customer_id WHERE c.wholesaler_id=" . $id . " AND sbo.wholesale_unit_amount != 0";
      } else if ( $user == "admin" ) {
        $query = "SELECT * FROM service_billing_once_off WHERE wholesale_unit_amount != 0";
      }
      $result = $this->db->execute_query($query);

    return mysql_num_rows($result);
  }

  /* function get_num_rows_invoice()
  **
  ** DESCRIPTION: Deletes an entry
  **
  ** PARAMETERS:
  ** - none
  **
  ** RETURNS:
  ** int
  ** 
  ** 
  */
  function get_num_rows_invoice($user,$id,$key) {
      
      if ( $user == "reseller" ) {
        $query = "SELECT * FROM service_billing_once_off sbo JOIN services s ON sbo.service_id=s.service_id JOIN customers c ON s.customer_id=c.customer_id WHERE c.wholesaler_id=" . $id . " AND sbo." . $key . " != 0";
      } else if ( $user == "admin" ) {
        $query = "SELECT * FROM service_billing_once_off WHERE " . $key . " != 0";
      }
      $result = $this->db->execute_query($query);

    return mysql_num_rows($result);
  }

  /* function get_no_wua()
  **
  ** DESCRIPTION: Deletes an entry
  **
  ** PARAMETERS:
  ** - none
  **
  ** RETURNS:
  ** 1 - sucess
  ** 0 - fail
  ** 
  */
  function get_no_wua($user,$id,$start,$end) {
    
    $a = array();

      
      if ( $user == "reseller" ) {
        $query = "SELECT * FROM service_billing_once_off sbo JOIN services s ON sbo.service_id=s.service_id JOIN customers c ON s.customer_id=c.customer_id WHERE c.wholesaler_id=" . $id . " AND sbo.wholesale_unit_amount = 0 LIMIT " . $start . ", " . $end;
      } else if ( $user == "admin" ) {
        $query = "SELECT * FROM service_billing_once_off WHERE wholesale_unit_amount = 0 LIMIT " . $start . ", " . $end;
      }
      $result = $this->db->execute_query($query);
      
      if ($result != 0 ) {

        while($row = $this->db->fetch_row_array($result)) {
          $a[] = $row;
        }
      }

    return $a;
  }

  /* function get_wua()
  **
  ** DESCRIPTION: Deletes an entry
  **
  ** PARAMETERS:
  ** - none
  **
  ** RETURNS:
  ** 1 - sucess
  ** 0 - fail
  ** 
  */
  function get_wua($user,$id,$start,$end) {
    
    $a = array();

      
      if ( $user == "reseller" ) {
        $query = "SELECT * FROM service_billing_once_off sbo JOIN services s ON sbo.service_id=s.service_id JOIN customers c ON s.customer_id=c.customer_id WHERE c.wholesaler_id=" . $id . " AND sbo.wholesale_unit_amount != 0";
      } else if ( $user == "admin" ) {
        $query = "SELECT * FROM service_billing_once_off WHERE wholesale_unit_amount != 0 LIMIT " . $start . ", " . $end;
      }
      $result = $this->db->execute_query($query);
      
      if ($result != 0 ) {

        while($row = $this->db->fetch_row_array($result)) {
          $a[] = $row;
        }
      }

    return $a;
  }

  /* function get_invoice()
  **
  ** DESCRIPTION: Deletes an entry
  **
  ** PARAMETERS:
  ** - none
  **
  ** RETURNS:
  ** 1 - sucess
  ** 0 - fail
  ** 
  */
  function get_invoice($user,$id,$key,$start,$end) {
    
    $a = array();

      if ( $user == "reseller" ) {
        $query = "SELECT * FROM service_billing_once_off sbo JOIN services s ON sbo.service_id=s.service_id JOIN customers c ON s.customer_id=c.customer_id WHERE c.wholesaler_id=" . $id . " AND sbo." . $key . " != 0 LIMIT " . $start . ", " . $end;
      } else if ( $user == "admin" ) {
        $query = "SELECT * FROM service_billing_once_off WHERE " . $key . " != 0 LIMIT " . $start . ", " . $end;
      }
      $result = $this->db->execute_query($query);
      
      if ($result != 0 ) {

        while($row = $this->db->fetch_row_array($result)) {
          $a[] = $row;
        }
      }

    return $a;
  }

}

